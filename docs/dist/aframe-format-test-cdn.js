
window.storyFormat({
    "name": "TwineSpace",
    "version": "1.0.0-test",
    "author": "Dan Cox", 
    "description": "Test story format with local vendor dependencies",
    "proofing": false,
    "source": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>{{STORY_NAME}}</title>\n<style>body{font-size:2em}a,tw-link{color:blue;cursor:pointer;text-decoration:underline}a-scene{height:80%;left:0;position:absolute;top:0;transition:opacity 2s ease;z-index:999}tw-story{background:transparent;color:#fff;height:20%;padding:0;pointer-events:none;z-index:1}tw-passage{background:#000;border:6px double #fff;color:#fff;font-size:1em;line-height:1em;margin:auto 2vw 2em;max-height:40vh;overflow:auto;padding:1vw;pointer-events:auto;width:calc(94vw - 12px);z-index:1}.centered,tw-passage{bottom:0;left:0;position:fixed}.centered{transform:translate(0);width:100vw;z-index:1000}.arjs-loader{align-items:center;background-color:rgba(0,0,0,.8);display:flex;height:50%;justify-content:center;left:0;position:absolute;top:0;width:50%;z-index:9999}.arjs-loader div{color:#fff;font-size:1.25em;text-align:center}</style>\n</head>\n<body>\n<tw-story class=\"centered\"><tw-passage class=\"passage\"></tw-passage></tw-story>\n{{STORY_DATA}}\n<script src=\"/vendor/jquery.min.js\"></script>\n<script src=\"/vendor/aframe.min.js\"></script>\n<script src=\"/vendor/markdown-it.min.js\"></script>\n<script src=\"/vendor/lodash.min.js\"></script>\n<script>\n\n// AFrame Proxy\nclass AFrameProxy {\n    static createScene() {\n        if ($('a-scene').length === 0) {\n            $('body').append('<a-scene vr-mode-ui=\"enabled: false\" arjs=\"debugUIEnabled: false; detectionMode: mono_and_matrix; matrixCodeType: 3x3;\" />');\n        }\n        return $('a-scene');\n    }\n\n    static add(parent, type, attributes) {\n        if ($(parent).length === 0) {\n            throw new Error('Parent element does not exist!');\n        }\n        const element = $('<a-' + type + ' ' + attributes + ' />');\n        parent.append(element);\n        return element;\n    }\n\n    static removeScene() {\n        $('a-scene').remove();\n    }\n}\n\n// Passage\nclass Passage {\n    constructor(name = 'Default', tags = [], source = '') {\n        this.name = name;\n        this.tags = tags;\n        this.source = source;\n    }\n}\n\n// Markdown Parser\nclass Markdown {\n    static parse(text) {\n        AFrameProxy.removeScene();\n        \n        // Process Twine links and A-Frame syntax\n        const rules = [\n            [new RegExp('\\\\[\\\\[(.*?)\\\\|(.*?)\\\\]\\\\]', 'g'), '<tw-link role=\"link\" data-passage=\"$2\">$1</tw-link>'],\n            [new RegExp('\\\\[\\\\[(.*?)->(.*?)\\\\]\\\\]', 'g'), '<tw-link role=\"link\" data-passage=\"$2\">$1</tw-link>'],\n            [new RegExp('\\\\[\\\\[(.*?)<-(.*?)\\\\]\\\\]', 'g'), '<tw-link role=\"link\" data-passage=\"$1\">$2</tw-link>'],\n            [new RegExp('\\\\[\\\\[(.*?)\\\\]\\\\]', 'g'), '<tw-link role=\"link\" data-passage=\"$1\">$1</tw-link>'],\n            [new RegExp('\\\\((.*?):([^>]*?)\\\\)\\\\[([^>]*?)\\\\]', 'gim'), (match, type, attributes, children) => {\n                const scene = AFrameProxy.createScene();\n                const element = AFrameProxy.add(scene, type, attributes);\n                children.replace(new RegExp('\\\\((.*?):([^>]*?)\\\\)', 'gim'), (childMatch, childType, childAttributes) => {\n                    AFrameProxy.add(element, childType, childAttributes);\n                    return '';\n                });\n                return '';\n            }],\n            [new RegExp('\\\\((.*?):([^>]*?)\\\\)', 'gim'), (match, type, attributes) => {\n                if (type.toLowerCase() === 'embed-scene') {\n                    const passageName = attributes.trim().slice(1, -1);\n                    const passage = window.story.include(passageName);\n                    $('body').append(passage);\n                    return '';\n                }\n                const scene = AFrameProxy.createScene();\n                AFrameProxy.add(scene, type, attributes);\n                return '';\n            }],\n            [new RegExp('[\\r\\n]', 'g'), '<br>']\n        ];\n        \n        rules.forEach(([pattern, replacement]) => {\n            text = text.replace(pattern, replacement);\n        });\n        \n        if ($('a-marker').length > 0) {\n            $('a-scene').append('<a-entity camera>');\n        }\n        \n        return markdownit().renderInline(text);\n    }\n\n    static unescape(text) {\n        const rules = [\n            ['&amp;', '&'],\n            ['&lt;', '<'],\n            ['&gt;', '>'],\n            ['&quot;', '\"'],\n            [\"&#x27;\", \"'\"]\n        ];\n        \n        rules.forEach(([encoded, decoded]) => {\n            text = text.replaceAll(encoded, decoded);\n        });\n        \n        return text;\n    }\n}\n\n// Story\nclass Story {\n    constructor() {\n        this.storyDataElement = $('tw-storydata');\n        this.name = this.storyDataElement.attr('name');\n        this.creator = this.storyDataElement.attr('creator');\n        this.creatorVersion = this.storyDataElement.attr('creator-version');\n        this.passages = [];\n        \n        this.storyDataElement.children('tw-passagedata').each((index, element) => {\n            const $element = $(element);\n            const tags = $element.attr('tags');\n            const tagArray = tags !== '' && tags !== undefined ? tags.split(' ') : [];\n            this.passages.push(new Passage(\n                $element.attr('name'),\n                tagArray,\n                Markdown.unescape($element.html())\n            ));\n        });\n        \n        this.userScripts = [];\n        $('*[type=\"text/twine-javascript\"]').each((index, element) => {\n            this.userScripts.push($(element).html());\n        });\n        \n        this.userStyles = [];\n        $('*[type=\"text/twine-css\"]').each((index, element) => {\n            this.userStyles.push($(element).html());\n        });\n        \n        this.storyElement = $('tw-story');\n        this.storyElement.on('click', 'tw-link[data-passage]', (event) => {\n            const passageName = Markdown.unescape($(event.target).closest('[data-passage]').data('passage'));\n            this.show(passageName);\n        });\n        \n        this.passageElement = $('tw-passage');\n    }\n    \n    include(passageName) {\n        const passage = this.getPassageByName(passageName);\n        if (passage === null) {\n            throw new Error('Passage does not exist!');\n        }\n        return passage.source;\n    }\n    \n    start() {\n        this.userStyles.forEach(style => {\n            $('body').append('<style>' + style + '</style>');\n        });\n        \n        this.userScripts.forEach(script => {\n            try {\n                _.template('<% ' + script + ' %>')({ $: $ });\n            } catch (error) {\n                throw new Error('User script error: ' + error);\n            }\n        });\n        \n        this.getPassagesByTag('script').forEach(passage => {\n            try {\n                _.template('<% ' + passage.source + ' %>')({ $: $ });\n            } catch (error) {\n                throw new Error('User script error: ' + error);\n            }\n        });\n        \n        const startNode = parseInt(this.storyDataElement.attr('startnode'));\n        const startPassage = $('[pid=\"' + startNode + '\"]');\n        if (startPassage.length === 0) {\n            throw new Error('Starting passage not found!');\n        }\n        this.show(startPassage.attr('name'));\n    }\n    \n    show(passageName) {\n        const passage = this.getPassageByName(passageName);\n        if (passage === null) {\n            throw new Error('There is no passage with the name ' + passageName);\n        }\n        this.passageElement.attr('tags', passage.tags);\n        \n        try {\n            passage.source = _.template(passage.source, { variable: '$' })({ $: $ });\n        } catch (error) {\n            console.log('Template error (non-fatal):', error);\n            // Continue without templating if there's an error\n        }\n        \n        this.passageElement.html(Markdown.parse(passage.source));\n    }\n    \n    getPassagesByTag(tag) {\n        return this.passages.filter(passage => passage.tags.includes(tag));\n    }\n    \n    getPassageByName(passageName) {\n        const matchingPassages = this.passages.filter(passage => passage.name === passageName);\n        return matchingPassages.length !== 0 ? matchingPassages[0] : null;\n    }\n}\n\n// Initialize\nwindow.$ = $;\nconsole.log('Initializing complete story system...');\nwindow.story = new Story();\nconsole.log('Story object created, starting story...');\nwindow.story.start();\nconsole.log('Story started successfully');\n\n</script>\n</body>\n</html>"
});
